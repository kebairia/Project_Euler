#+PROPERTY: header-args :results output :exports both
#+PROPERTY: header-args :shebang #!/bin/env python

* Problem 1 - Multiples of 3 or 5
#+name: problem1
#+begin_src python :tangle p001.py 
  def is_mul3(x):
      return x%3 == 0
  
  def is_mul5(x):
      return x%5 == 0
  sum = 0
  for i in range(1, 1000):
      if is_mul3(i) or is_mul5(i):
          sum += i
  print("The result is: ", sum)
#+end_src

#+RESULTS: problem1
: None

#+RESULTS:
: The result is:  233168

Another elegant solution
#+begin_src python :tangle p002.py
  is_mul3 = lambda x: x%3 == 0
  is_mul5 = lambda x: x%5 == 0
  print("Thre result is: ", sum([x for x in range(1,1000) if is_mul3(x) or is_mul5(x)]))
#+end_src

* Problem 2 - Even Fibonacci numbers
#+name: problem2
#+begin_src python :tangle p002.py
  is_even = lambda x: x % 2 == 0
  def fib(limit):
      lst = []
      x, y, ans = 0, 1, 1
      while x <= limit:
          lst.append(ans)
          ans += y
          x, y = y, x + y
      return lst
  print("The result is: ", sum([x for x in fib(4000000) if is_even(x)]))
#+end_src

#+RESULTS: problem2
: None

* Problem 3 - Largest prime factor
#+name: problem3
#+begin_src python :tangle p003.py 
  from math import *
  
  def is_prime(x):
      if x == 1 :
          return False
      if x == 2:
          return True
      else:
          for i in range(2, x):
              if x%i == 0 :
                  return False
              return True
  def prime_fact(x):
      lst = []
      for i in range(1, x):
          if is_prime(i) and x%i == 0 :
                  lst.append(i)
                  x = x/i
      lst.append(x)
  
      print(max(lst))
      print(lst)
  # prime_fact(600851475143)
  prime_fact(60085147)
  # 
#+end_src

#+RESULTS: problem3

